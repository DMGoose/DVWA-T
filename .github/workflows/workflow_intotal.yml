name: "workflow_intotal"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '22 7 * * 2'

jobs:
  sast:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4


    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis (SAST)
      uses: github/codeql-action/analyze@v3

  sca:
    needs: sast
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 这是fs 的扫描,目录 SCA, 未构建镜像时提前发现问题
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      # 构建容器
      - name: Build Docker Image from Current App
        run: docker build -t my-app:${{ github.sha }} .

      # 这是 docker image 的 扫描, 扫描 docker image 中的漏洞
      - name: Run Trivy on Built Image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'my-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      # 上传结果
      - name: Upload Trivy FS scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-fs'
      
      - name: Upload Trivy Docker scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-image'

  dast:
    needs: sca
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Start DVWA with Docker Compose
        run: |
          docker compose up -d
          sleep 15  # 给 DVWA 启动一些时间

      - name: List Running Containers (Debug)
        run: docker ps

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:4280'

      # - name: Upload ZAP Report to GitHub Security tab
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: zap-report.html

      
